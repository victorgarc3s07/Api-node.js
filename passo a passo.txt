1.0. Configurando o ambiente

1.1 criamos o arquivo serve.js

1.1.1 chamamos para usar o node no console

	npm init -y
1.2 instalamos a biblioteca express

1.3 importamos a biblioteca express
	import express from 'express'

1.4 criamos a constante para trabalhar com o express e informamos que iremos trabalhar com json
	const app = express();
	app.use(express.json());

1.5 no arquivo package.json adicionamos o elemento "type" : "module" na descrição do código

2.0 iniciando as rotas

2.1 rota get(puxa o dado do banco)
	app.get('/usuarios', (req, res) => {
	res.send("Servidor online")};
)

2.2 criando a porta onde o servidor irá funcionar
	app.listen(3000);

2.3 para visualizar as respostas das requisições HTTP fazemos uso da extensão 'thunderClient'

3.0 iniciamos a criação básica das rotas HTTP
3.1 criamos a variável users para receber os usuários cadastrados
	const users = [];

3.2 iniciamos a rota post
	app.post('/usuarios', (req, res) => {
	res.send('Post funcionando');
} )

3.3 determinamos onde o usuários seram salvos, adicionando o elemento users.push(req.body), em que este puxa os elementos do body

3.4 salvamos os usuários na get
	app.get('/usuarios', (req, res) => {
	res.json(users);
} )

3.5 para ele retornar o usuário salvos que foram recém adicionados
	app.post('/usuarios', (req, res) => {
	users.push(req.body);
	res.status(201).json(req.body);
})

3.6 modificações na rota get 
	app.get('/usuarios', (req, res) => {
	res.status(200).json(users);
});

4.0 iniciando rota de adicionar usuário no banco através do prisma

app.post('/usuarios', async (req, res) => {
    
    await prisma.user.create({
        
        data: {
            email: req.body.email,
            name: req.body.name,
            age: req.body.age
        }
    })

    res.status(201).json(req.body);
    
})

4.1 iniciando rota de retornar os usuários

app.get('/usuarios', async (req, res) => {

    let users = [];
    if(req.query) {
        users =  await prisma.user.findMany({
            where: {
                name: req.query.name,
                email: req.query.email,
                age: req.query.age
            }
        })

    } else {
        users =  await prisma.user.findMany();
    }
    

    res.status(200).json(users);
});

4.2 iniciar rota de atualização de dados do usuário
app.put('/usuarios/:id',  async (req, res) => {
    await prisma.user.update ({

        where: {
            id: req.params.id
        },
        data: {
            email: req.body.email,
            name: req.body.name,
            age: req.body.age
        }
    })
    
    res.status(201).json(req.body).send("Dados alterados!");

})
4.3 iniciando rota de deletar usuário
app.delete('/usuarios/:id', async (req, res) => {
    
    await prisma.user.delete({
        where: {
            id: req.params.id,
        }
    })
    res.status(200).json({message: 'usuário deletado com sucesso!'})

})




	






